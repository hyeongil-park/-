# -*- coding: utf-8 -*-
"""YOLOv7 test code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fdnOmDYF2BnZuAxSJ2AHOSttuiUmNLvz

### test data 생성
"""

# Commented out IPython magic to ensure Python compatibility.
### test data 생성

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt
import cv2
import networkx as nx
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers

from sklearn.metrics import confusion_matrix,f1_score

# %matplotlib inline

df=pd.read_pickle('/content/drive/MyDrive/LSWMD.pkl/LSWMD.pkl')
df.info()

df = df.drop(['waferIndex'], axis = 1)
def find_dim(x):
    dim0=np.size(x,axis=0)
    dim1=np.size(x,axis=1)
    return dim0,dim1
df['waferMapDim']=df.waferMap.apply(find_dim)
df.sample(5)

df['failureNum']=df.failureType
df['trainTestNum']=df.trianTestLabel
mapping_type={'Center':0,'Donut':1,'Edge-Loc':2,'Edge-Ring':3,'Loc':4,'Random':5,'Scratch':6,'Near-full':7,'none':8}
mapping_traintest={'Training':0,'Test':1}
df=df.replace({'failureNum':mapping_type, 'trainTestNum':mapping_traintest})

df_test=df[df['trainTestNum']==1]
df_withlabel_t = df_test[(df_test['failureNum']>=0) & (df_test['failureNum']<=6) & (df_test['failureNum']!=5)]
df_withlabel_t =df_withlabel_t.reset_index()

df_copy=df_withlabel_t.copy()
new_df_withlabel=df_copy[df_copy['waferMapDim']==(26,26)]
shape1=26
shape2=26

len(new_df_withlabel)

df_c=new_df_withlabel[new_df_withlabel['failureNum']==0].reset_index()
df_d=new_df_withlabel[new_df_withlabel['failureNum']==1].reset_index()
df_el=new_df_withlabel[new_df_withlabel['failureNum']==2].reset_index()
df_er=new_df_withlabel[new_df_withlabel['failureNum']==3].reset_index()
df_l=new_df_withlabel[new_df_withlabel['failureNum']==4].reset_index()
df_s=new_df_withlabel[new_df_withlabel['failureNum']==6].reset_index()

df_c['waferMap'][0][0][0]

len(df_c)

def make_wafer(a,b,shape1,shape2):
  n_list=[]
  for i in range(shape1):
    for j in range(shape2):
      if a[i][j]==0 and b[i][j]==0:
        n_list.append(0)
      elif a[i][j]==1 and b[i][j]==1:
        n_list.append(1)
      elif a[i][j]==1 and b[i][j]==2:
        n_list.append(2)
      elif a[i][j]==2 and b[i][j]==1:
        n_list.append(2)
      elif a[i][j]==2 and b[i][j]==2:
        n_list.append(2)
      else :
        n_list.append(1)

  image=np.array(n_list)
  image=image.reshape(shape1,shape2)
  return image

"""###필터링"""

def dfs(graph, start_node):
    ## 기본은 항상 두개의 리스트를 별도로 관리해주는 것
    need_visited, visited = list(), list()

    ## 시작 노드를 시정하기
    need_visited.append(start_node)

    ## 만약 아직도 방문이 필요한 노드가 있다면,
    while need_visited:
        ## 그 중에서 가장 마지막 데이터를 추출 (스택 구조의 활용)
        node = need_visited.pop()

        ## 만약 그 노드가 방문한 목록에 없다면
        if node not in visited:

            ## 방문한 목록에 추가하기
            visited.append(node)

            ## 그 노드에 연결된 노드를
            need_visited.extend(graph[node])
    #visited = visited[:12]

    return visited

def make_adj_matrix(num, shape_1,shape_2,df,threshold):
  filter_data=df.iloc[num]
  filter_wbm = filter_data['waferMap']
  filter_index = []
  adj_matrix = []

  for shape1 in range(shape_1):
    for shape2 in range(shape_2):
        if filter_data['waferMap'][shape1,shape2]==2:
            filter_index.append([shape1,shape2])

  #print(len(filter_index))

  for i in range(len(filter_index)):
      possible_way = []

      first_i_index = filter_index[i][0]
      second_i_index = filter_index[i][1]


      #print("---------------", i ,"----------------")
      #print("i", [first_i_index, second_i_index])


      if (first_i_index != 0) and (second_i_index != 0):
          possible_way_1 = [first_i_index, second_i_index + 1]
          possible_way_2 = [first_i_index + 1, second_i_index]
          possible_way_3 = [first_i_index - 1, second_i_index ]
          possible_way_4 = [first_i_index, second_i_index -1]

      elif (first_i_index == 0):

          possible_way_1 = [first_i_index, second_i_index + 1]
          possible_way_2 = [first_i_index + 1, second_i_index]
          possible_way_3 = [first_i_index , second_i_index ]
          possible_way_4 = [first_i_index, second_i_index -1]

      elif (second_i_index == 0):

          possible_way_1 = [first_i_index, second_i_index + 1]
          possible_way_2 = [first_i_index + 1, second_i_index]
          possible_way_3 = [first_i_index -1, second_i_index]
          possible_way_4 = [first_i_index, second_i_index ]

      possible_way.extend([possible_way_1,possible_way_2, possible_way_3, possible_way_4])
      #possible_way = np.array(possible_way).reshape(4,2)
      #print("possible way", possible_way)
      for j in range(len(filter_index)):
            first_j_index = filter_index[j][0]
            second_j_index = filter_index[j][1]
            j_index = [first_j_index, second_j_index]

          #print("j_index", j_index)
          #print("possible way", possible_way)

          #print(j_index in possible_way)

            if j_index in possible_way:
                matrix_value = 1
            else:
                matrix_value = 0

          #print("matrix_value", matrix_value)
            adj_matrix.append(matrix_value)

  adj_matrix = np.array(adj_matrix).reshape(len(filter_index),len(filter_index))


  for i in range(len(filter_index)):
    for j in range(len(filter_index)):
      if i ==j:
        adj_matrix[i,j] = 0



      graph = nx.Graph(adj_matrix)

      dfs_root = []

      for i in range(len(filter_index)):
        temp_root = dfs(graph,i)
        dfs_root.append(temp_root)

      dfs_root_over_12 = []
      for i in dfs_root:
        if len(i) < threshold:
          i = 0
        else:
          i = 1
        dfs_root_over_12.append(i)



      for i in range(len(filter_index)):
        # 12 넘는지 안넘는지. 넘으면 1 아니면 0
        over_12_or_not = dfs_root_over_12[i]
        first_fail_index = filter_index[i][0]
        second_fail_index = filter_index[i][1]

        fail_index = filter_wbm[first_fail_index,second_fail_index]

          #print("first", first_fail_index)
          #print("second", second_fail_index)
          #print(fail_index)


        if over_12_or_not == 0:
          filter_wbm[first_fail_index,second_fail_index] = 1



      return filter_wbm

from sklearn.cluster import DBSCAN
def filter_by_dbscan(data,i, shape1,shape2):
  ### wafer데이터 복원을 위한 기본 틀 제작
  img = data[i]
  test_img=img.copy()
  test_wafer=np.where(test_img>=1,1,0)

  ### clustering을 위한 이미지 변환
  test_w=np.where(test_img<2,0,test_img)

  copy_w=[]
  for i in range(shape1):
    for j in range(shape2):
      if test_w[i][j]==2:
        copy_w.append((i,j))
      else:
        copy_w.append((0,0))

  dbscan=DBSCAN(eps=3,min_samples=7)
  clusters=dbscan.fit_predict(copy_w)
  new=np.where(clusters>=0,clusters,0)
  new_wf=test_wafer.reshape(shape1*shape2,)
  #new_test_wafer1=new.copy()
  #new_test_wafer2=new.copy()
  new_test_wafer1=np.where(new==0,new_wf,2)

  return new_test_wafer1

def make_filtering_list(len_list,len_filter,df):
  filtering_list=[]
  for size in range(len_list):
    shape1=df['waferMap'][size].shape[0]
    shape2=df['waferMap'][size].shape[1]
    filtering_list.append(make_adj_matrix(size,shape1,shape2,df,len_filter))

  return filtering_list

df_list=[df_c,df_d,df_el,df_er,df_l,df_s]
filter_df=[]

for i in df_list:
  filter_df.append(make_filtering_list(len(i),12,i))

def make_filter_wafer(df_w,i):
  fw=filter_by_dbscan(df_w,i,shape1,shape2).reshape(shape1,shape2)
  return fw

kernel = np.ones((5, 5))
def filter(data,threshold=0.7):
  #기본 파라미터 값 설정

  sum_kernel=kernel.shape[0]*kernel.shape[1]*2
  shape_1=data.shape[0]
  shape_2=data.shape[1]

  # 불량 패턴만 남기기
  test_sample=np.where(data<2,0,2)
  test_sample=np.array(test_sample,dtype=np.uint8)
  #plt.imshow(test_sample)
  #plt.show()

  # 커널 사용
  dst=cv2.filter2D(test_sample,-1,kernel,borderType=2)
  new_dst=dst/sum_kernel
  filter_img=np.where(new_dst>threshold,2,0)
  #plt.imshow(filter_img)
  #plt.show()

  # 원래 이미지 형태로 변환
  img=np.where(filter_img==2,2,1)
  img=np.where(filter_img==0,1,2)
  img=np.where(data==0,0,img)



  return img

df_nc=[]
df_nd=[]
df_nel=[]
df_ner=[]
df_nl=[]
df_ns=[]
new_df_list=[df_nc,df_nd,df_nel,df_ner,df_nl,df_ns]

df_final=[]
for i in range(len(filter_df)):
  df_w=filter_df[i]
  new_df_w=new_df_list[i]
  for j in range(len(df_w)):
    new_df_w.append(make_filter_wafer(df_w,j))
  df_final.append(new_df_w)
  #new_df_w.clear()

len(df_final[0])

len(df_final[0])

plt.imshow(df_nd[0])

final_data=[]
for i in range(len(df_final)):
  data_list=[]
  print("===========",str(i),"==========")
  for j in range(len(df_final[i])):
    print("=======",str(j),"======")
    data_list.append(filter(df_final[i][j],0.3))
  final_data.append(data_list)

len(final_data[0])

"""###mixed_data 생성"""

def make_mixed_wbm(df_i,df_j,i,j):
  mw=make_wafer(final_data[df_i][i],final_data[df_j][j],shape1,shape2)
  label=(df_i,df_j)
  return mw,label

len(final_data[0])

mixed_list=[]
label_list=[]
for df_i in range(5):
  for df_j in range(1,6):
    if df_i != df_j:
      for first_num in range(len(final_data[df_i])):
        for second_num in range(len(final_data[df_j])):
          mixed_list.append(make_mixed_wbm(df_i,df_j,first_num,second_num)[0])
          label_list.append(make_mixed_wbm(df_i,df_j,first_num,second_num)[1])
    else:
      print(df_i,df_j)

len(mixed_list)

label_list

plt.imshow(mixed_list[1])

"""#### 저장한 모델 불러오기"""

from keras.models import model_from_json

model = model_from_json(open('/content/drive/MyDrive/mixed_test/model_architecture.json').read())
model.load_weights('/content/drive/MyDrive/mixed_test/model_weights.h5')

# dont forget to compile your model
model.compile(loss='binary_crossentropy', optimizer='adam')

model.summary()

x = mixed_list[10000].reshape((-1, 26, 26, 1))

new_x = np.zeros((len(x), 26, 26, 3))

for w in range(len(x)):
    for i in range(26):
        for j in range(26):
            new_x[w, i, j, int(x[w, i, j])] = 1

model.predict(new_x)<0.1

"""## segmentation 진행"""

from sklearn.cluster import DBSCAN
def segmented_by_dbscan(data,i, shape1,shape2):
  ### wafer데이터 복원을 위한 기본 틀 제작
  img = data[i]
  test_img=img.copy()
  test_wafer=np.where(test_img>=1,1,0)

  ### clustering을 위한 이미지 변환
  test_w=np.where(test_img<2,0,test_img)

  copy_w=[]
  for i in range(shape1):
    for j in range(shape2):
      if test_w[i][j]==2:
        copy_w.append((i,j))
      else:
        copy_w.append((0,0))

  #### segmentation
  dbscan=DBSCAN(eps=1.5)
  clusters=dbscan.fit_predict(copy_w)
  new=np.where(clusters<=0,0,clusters)
  #new=clusters
  check_num=len(pd.DataFrame(new).value_counts())
  eps=5
  while check_num<4 & eps<10 & check_num>2 :
    eps+=1
    copy_w=[]
    for i in range(shape1):
      for j in range(shape2):
        if int(new.reshape(shape1,shape2)[i][j])!=0:
          copy_w.append((i,j,new.reshape(shape1,shape2)[i][j]))
        else:
          copy_w.append((0,0,0))

    dbscan=DBSCAN(eps=eps, min_samples=4)
    clusters=dbscan.fit_predict(copy_w)
    new=np.where(clusters>=0,clusters,0)
    check_num=len(pd.DataFrame(new).value_counts())
  new_wbm=new.reshape(shape1,shape2)
  #new_wbm=np.where(new_wbm>1,2,new_wbm)
  seg_1=np.where(new_wbm==1,2,test_wafer)
  seg_2=np.where(new_wbm>1,2,test_wafer)

  return seg_1,seg_2

plt.imshow(segmented_by_dbscan(mixed_list,128,shape1,shape2)[0])

seg_list_1=[]
seg_list_2=[]

for i in range(len(mixed_list)):
  seg_list_1.append(segmented_by_dbscan(mixed_list,i,shape1,shape2)[0])
  seg_list_2.append(segmented_by_dbscan(mixed_list,i,shape1,shape2)[1])

len(seg_list_1)

"""### segmentation 한 이미지 저장하기"""

import os
def make_train_dir(train_num):
  os.makedirs('/content/drive/MyDrive/test_'+str(train_num))

def save_cluster(cluster,i,start_num,train_num):
  plt.imshow(cluster)
  plt.savefig("/content/drive/MyDrive/test_"+str(train_num)+"/"+str(i+start_num)+".jpg")

make_train_dir(7)
for i in range(len(seg_list_1)):
  save_cluster(seg_list_1[i],i,0,7)

make_train_dir(8)
for i in range(len(seg_list_2)):
  save_cluster(seg_list_2[i],i,0,8)

make_train_dir(9)

for i in range(len(mixed_list)):
  save_cluster(mixed_list[i],i,0,9)

"""### detect"""

!pwd

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/TheCodingBug/yolov7

!python detect.py --weights /content/drive/MyDrive/TheCodingBug/yolov7/runs/train/yolov7xcustom21/weights/best.pt --conf 0.4 --img-size 640 --source /content/drive/MyDrive/test_7 --save-txt

!python detect.py --weights /content/drive/MyDrive/TheCodingBug/yolov7/runs/train/yolov7xcustom21/weights/best.pt --conf 0.4 --img-size 640 --source /content/drive/MyDrive/test_8 --save-txt

!python detect.py --weights /content/drive/MyDrive/TheCodingBug/yolov7/runs/train/yolov7xcustom21/weights/best.pt --conf 0.4 --img-size 640 --source /content/drive/MyDrive/test_9 --save-txt

#%cd /
from glob import glob
gt_list_1 = glob('/content/drive/MyDrive/TheCodingBug/yolov7/runs/detect/exp6/labels/*.txt')

print(len(gt_list_1))

gt_list_1=sorted(gt_list_1)

gt_list_2 = glob('/content/drive/MyDrive/TheCodingBug/yolov7/runs/detect/exp7/labels/*.txt')

print(len(gt_list_2))

gt_list_2=sorted(gt_list_2)

gt_list_3 = glob('/content/drive/MyDrive/TheCodingBug/yolov7/runs/detect/exp8/labels/*.txt')

print(len(gt_list_3))

gt_list_3=sorted(gt_list_3)

import re
num_list=[]
for i in range(len(gt_list_1)):
  numbers = re.findall(r'\d+',gt_list_1[i])
  print(numbers)
  num_list.append(numbers[2])

print(len(num_list))

num_list_2=[]
for i in range(len(gt_list_2)):
  numbers = re.findall(r'\d+',gt_list_2[i])
  print(numbers)
  num_list_2.append(numbers[2])

print(len(num_list_2))

num_list_3=[]
for i in range(len(gt_list_3)):
  numbers = re.findall(r'\d+',gt_list_3[i])
  print(numbers)
  num_list_3.append(numbers[2])

print(len(num_list_3))

def make_label_list(num_list,num_exp):
  label_list=[]
  for num in range(len(mixed_list)):
    if str(num) in num_list:
      gt = np.loadtxt('/content/drive/MyDrive/TheCodingBug/yolov7/runs/detect/exp'+str(num_exp)+'/labels/'+str(num)+'.txt', delimiter = ' ')
      if type(gt[0])==np.float64:
        label_list.append(int(gt[0]))
      else:
        label_list_t=[]
        for i in range(len(gt)):
          label_list_t.append(int(gt[i][0]))
        label_list.append(label_list_t)
        #label_list.append(int(gt[0][0]))
    else:
      label_list.append(100)
  return label_list

label_list_1=make_label_list(num_list,6)
label_list_2=make_label_list(num_list_2,7)
label_list_3=make_label_list(num_list_3,8)

"""df_c,df_d,df_el,df_er,df_l,df_s

c,d,e,l,s,er
"""

pl_list=['0','1','2','3','4','5','100']
label_name_list=['center','donut','edge_loc','loc','scratch','edge_ring','none']
for i,j in zip(pl_list,label_name_list):
  print("==================",i,j,"==================")
  for lab in label_list_1:
    if type(lab)==list:
      lab=np.where(lab==i,j,lab)
    else:
      label_list_1=np.where(label_list_1==i,j,label_list_1)

type(label_list_1[0])==list

pl_list=['0','1','2','3','4','5','100']
label_name_list=['center','donut','edge_loc','loc','scratch','edge_ring','none']
new_label_list_1=[]

for lab in range(len(label_list_1)):
  if type(label_list_1[lab])==list:
    ml=[]
    for lol in range(len(label_list_1[lab])):
      for i,j in zip(pl_list,label_name_list):
        if str(label_list_1[lab][lol])==i:
          ml.append(j)
    new_label_list_1.append(ml)
  else:
    for i,j in zip(pl_list,label_name_list):
      if str(label_list_1[lab])==i:
        new_label_list_1.append(j)

pl_list=['0','1','2','3','4','5','100']
label_name_list=['center','donut','edge_loc','loc','scratch','edge_ring','none']
new_label_list_2=[]

for lab in range(len(label_list_2)):
  if type(label_list_2[lab])==list:
    ml=[]
    for lol in range(len(label_list_2[lab])):
      for i,j in zip(pl_list,label_name_list):
        if str(label_list_2[lab][lol])==i:
          ml.append(j)
    new_label_list_2.append(ml)
  else:
    for i,j in zip(pl_list,label_name_list):
      if str(label_list_2[lab])==i:
        new_label_list_2.append(j)

pl_list=['0','1','2','3','4','5','100']
label_name_list=['center','donut','edge_loc','loc','scratch','edge_ring','none']
new_label_list_3=[]

for lab in range(len(label_list_3)):
  if type(label_list_3[lab])==list:
    ml=[]
    for lol in range(len(label_list_3[lab])):
      for i,j in zip(pl_list,label_name_list):
        if str(label_list_3[lab][lol])==i:
          ml.append(j)
    new_label_list_3.append(ml)
  else:
    for i,j in zip(pl_list,label_name_list):
      if str(label_list_3[lab])==i:
        new_label_list_3.append(j)

label_name_list=['center','donut','edge_loc','loc','scratch','edge_ring','none']
new_label_list=['0','1','2','4','5','3','100']
final_label_list_1=[]

for lab in range(len(new_label_list_1)):
  if type(new_label_list_1[lab])==list:
    ml=[]
    for lol in range(len(new_label_list_1[lab])):
      for i,j in zip(label_name_list,new_label_list):
        if str(new_label_list_1[lab][lol])==i:
          ml.append(j)
    final_label_list_1.append(ml)
  else:
    for i,j in zip(label_name_list,new_label_list):
      if str(new_label_list_1[lab])==i:
        final_label_list_1.append(j)

label_name_list=['center','donut','edge_loc','loc','scratch','edge_ring','none']
new_label_list=['0','1','2','4','5','3','100']
final_label_list_2=[]

for lab in range(len(new_label_list_2)):
  if type(new_label_list_2[lab])==list:
    ml=[]
    for lol in range(len(new_label_list_2[lab])):
      for i,j in zip(label_name_list,new_label_list):
        if str(new_label_list_2[lab][lol])==i:
          ml.append(j)
    final_label_list_2.append(ml)
  else:
    for i,j in zip(label_name_list,new_label_list):
      if str(new_label_list_2[lab])==i:
        final_label_list_2.append(j)

label_name_list=['center','donut','edge_loc','loc','scratch','edge_ring','none']
new_label_list=['0','1','2','4','5','3','100']
final_label_list_3=[]

for lab in range(len(new_label_list_3)):
  if type(new_label_list_3[lab])==list:
    ml=[]
    for lol in range(len(new_label_list_3[lab])):
      for i,j in zip(label_name_list,new_label_list):
        if str(new_label_list_3[lab][lol])==i:
          ml.append(j)
    final_label_list_3.append(ml)
  else:
    for i,j in zip(label_name_list,new_label_list):
      if str(new_label_list_3[lab])==i:
        final_label_list_3.append(j)

for i,j in zip(pl_list,label_name_list):
  print("==================",i,j,"==================")
  label_list_2=np.where(label_list_2==i,j,label_list_2)

for i,j in zip(pl_list,label_name_list):
  print("==================",i,j,"==================")
  label_list_3=np.where(label_list_3==i,j,label_list_3)

label_name_list=['center','donut','edge_loc','loc','scratch','edge_ring','none']
new_label_list=['0','1','2','4','5','3','100']

for i,j in zip(new_label_list,label_name_list):
  print("==================",i,j,"==================")
  label_list_1=np.where(label_list_1==j,i,label_list_1)

for i,j in zip(new_label_list,label_name_list):
  print("==================",i,j,"==================")
  label_list_2=np.where(label_list_2==j,i,label_list_2)

for i,j in zip(new_label_list,label_name_list):
  print("==================",i,j,"==================")
  label_list_3=np.where(label_list_3==j,i,label_list_3)

label_first=[]
label_second=[]
for i in label_list:
  label_first.append(i[0])
  label_second.append(i[1])

label_df=pd.DataFrame(final_label_list_1,columns=['label_1'])

len(final_label_list_3)

label_df['label_2']=final_label_list_2
label_df['label_3']=final_label_list_3
label_df['gt_1']=label_first
label_df['gt_2']=label_second

label_df

label_df['gt_2'][0]

type(label_df['label_3'][3])!=list

check_list=[]
for i in range(len(label_df)):
  check_num=0
  if type(label_df['label_1'][i])==list or type(label_df['label_2'][i])==list:

    if type(label_df['label_1'][i])==list and type(label_df['label_2'][i])!=list:
      for lol in range(len(label_df['label_1'][i])):
        if int(label_df['label_1'][i][lol])==label_df['gt_1'][i] or int(label_df['label_1'][i][lol])==label_df['gt_2'][i] or int(label_df['label_2'][i])==label_df['gt_1'][i] or int(label_df['label_2'][i])==label_df['gt_2'][i]:
          check_num+=1
        else:
          check_num+=0

      if check_num>=1:
        print(check_num)
        check_list.append(1)
      else:
        check_list.append(0)

    elif type(label_df['label_1'][i])!=list and type(label_df['label_2'][i])==list:
      for lol in range(len(label_df['label_2'][i])):
        if int(label_df['label_1'][i])==label_df['gt_1'][i] or int(label_df['label_1'][i])==label_df['gt_2'][i] or int(label_df['label_2'][i][lol])==label_df['gt_1'][i] or int(label_df['label_2'][i][lol])==label_df['gt_2'][i]:
          check_num+=1
        else:
          check_num+=0
      if check_num>=1:
        print(check_num)
        check_list.append(1)
      else:
        check_list.append(0)

    elif type(label_df['label_1'][i])==list and type(label_df['label_2'][i])==list:
      for lol,loll in zip(range(len(label_df['label_1'][i]),range(len(label_df['label_2'][i])))):
        if int(label_df['label_1'][i][lol])==label_df['gt_1'][i] or int(label_df['label_1'][i][lol])==label_df['gt_2'][i] or int(label_df['label_2'][i][loll])==label_df['gt_1'][i] or int(label_df['label_2'][i][loll])==label_df['gt_2'][i]:
          check_num+=1
        else:
          check_num+=0
      if check_num>=1:
        print(check_num)
        check_list.append(1)
      else:
        check_list.append(0)
  else:
    if int(label_df['label_1'][i])==label_df['gt_1'][i] or int(label_df['label_1'][i])==label_df['gt_2'][i] or int(label_df['label_2'][i])==label_df['gt_1'][i] or int(label_df['label_2'][i])==label_df['gt_2'][i]:
      check_list.append(1)
    else:
      check_list.append(0)

label_df['check_first']=check_list

sum(label_df['check_first'])/250

check_list_2=[]
for i in range(len(label_df)):
  check_num=0
  if type(label_df['label_3'][i])==list:
    for lol in range(len(label_df['label_3'][i])):
      if int(label_df['label_3'][i][lol])==label_df['gt_1'][i] or int(label_df['label_3'][i][lol])==label_df['gt_2'][i]:
        check_num+=1
      else:
        check_num+=0

    if check_num>=1:
      check_list_2.append(1)
    else:
      check_list_2.append(0)

  else:
    if int(label_df['label_3'][i])==label_df['gt_1'][i] or int(label_df['label_3'][i])==label_df['gt_2'][i] :
      check_list_2.append(1)
    else:
      check_list_2.append(0)

label_df['check_second']=check_list_2

fail_df=label_df[label_df['check_first']==0]

fail_df[fail_df['check_second']==1]

sum(label_df['check_first'])/250

sum(label_df['check_second'])/250

fail_df

"""## 둘 다"""

check_list_3=[]
for i in range(len(label_df)):
  if int(label_df['label_1'][i])==label_df['gt_1'][i] or int(label_df['label_1'][i])==label_df['gt_2'][i]:
    if int(label_df['label_2'][i])==label_df['gt_1'][i] or int(label_df['label_2'][i])==label_df['gt_2'][i]:
      check_list_3.append(1)
    else:
      check_list_3.append(0)
  elif int(label_df['label_2'][i])==label_df['gt_1'][i] or int(label_df['label_2'][i])==label_df['gt_2'][i]:
    if int(label_df['label_1'][i])==label_df['gt_1'][i] or int(label_df['label_1'][i])==label_df['gt_2'][i]:
      check_list_3.append(1)
    else:
      check_list_3.append(0)
  else:
    check_list_3.append(0)

sum(check_list_3)/250

(1+1==2) and (1+2==3)==True

check_list_3=[]
for i in range(len(label_df)):
  check_num=0
  if type(label_df['label_1'][i])==list or type(label_df['label_2'][i])==list:

    if type(label_df['label_1'][i])==list and type(label_df['label_2'][i])!=list:
      for lol in range(len(label_df['label_1'][i])):
        if (int(label_df['label_1'][i][lol])==label_df['gt_1'][i] or int(label_df['label_1'][i][lol])==label_df['gt_2'][i]) and (int(label_df['label_2'][i])==label_df['gt_1'][i] or int(label_df['label_2'][i])==label_df['gt_2'][i]) == True:
          check_num+=1
        else:
          check_num+=0

      if check_num>=1:
        print(check_num)
        check_list_3.append(1)
      else:
        check_list_3.append(0)

    elif type(label_df['label_1'][i])!=list and type(label_df['label_2'][i])==list:
      for lol in range(len(label_df['label_2'][i])):
        if (int(label_df['label_1'][i])==label_df['gt_1'][i] or int(label_df['label_1'][i])==label_df['gt_2'][i]) and (int(label_df['label_2'][i][lol])==label_df['gt_1'][i] or int(label_df['label_2'][i][lol])==label_df['gt_2'][i])==True:
          check_num+=1
        else:
          check_num+=0
      if check_num>=1:
        print(check_num)
        check_list_3.append(1)
      else:
        check_list_3.append(0)

    elif type(label_df['label_1'][i])==list and type(label_df['label_2'][i])==list:
      for lol,loll in zip(range(len(label_df['label_1'][i]),range(len(label_df['label_2'][i])))):
        if (int(label_df['label_1'][i][lol])==label_df['gt_1'][i] or int(label_df['label_1'][i][lol])==label_df['gt_2'][i]) and (int(label_df['label_2'][i][loll])==label_df['gt_1'][i] or int(label_df['label_2'][i][loll])==label_df['gt_2'][i]):
          check_num+=1
        else:
          check_num+=0
      if check_num>=1:
        print(check_num)
        check_list_3.append(1)
      else:
        check_list_3.append(0)
  else:
    if (int(label_df['label_1'][i])==label_df['gt_1'][i] or int(label_df['label_1'][i])==label_df['gt_2'][i]) and (int(label_df['label_2'][i])==label_df['gt_1'][i] or int(label_df['label_2'][i])==label_df['gt_2'][i]):
      check_list_3.append(1)
    else:
      check_list_3.append(0)

sum(check_list_3)/250

